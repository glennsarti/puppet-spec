Examples('the assert_type function',
  Example('asserts compliant type by returning the value',
    Given(`assert_type(String, 'hello world')`),
    Evaluates_to('hello world')),

  Example('accepts type given as a String',
    Given(`assert_type('String', 'hello world')`),
    Evaluates_to('hello world')),

  Example('asserts non compliant type by raising an error',
    Given(`assert_type(Integer, 'hello world')`),
    Evaluates_with(Error(/expects an Integer value, got String/))),

  Example('checks that first argument is a type or a string',
    Given(`assert_type(10, 10)`),
    Evaluates_with(Error(/value of type String or Type, got Integer/))),

  Example('allows the second arg to be undef',
    Given(`assert_type(Optional[String], undef)`),
    Evaluates_to(undef)),

  Example('can be called with a callable that receives a specific type',
    Given(`assert_type(Optional[String], 1) |$e, $a| { [$e, $a, $a] }`),
    Evaluates_to([Optional[String], Integer[1, 1], Integer[1, 1]])),

  Example('can validate a type alias',
    Given(`type UnprivilegedPort = Integer[1024,65537] assert_type(UnprivilegedPort, 5432)`),
    Evaluates_to(5432)),

  Example('can validate a type alias passed as a string',
    Given(`type UnprivilegedPort = Integer[1024,65537] assert_type('UnprivilegedPort', 5432)`),
    Evaluates_to(5432)),

  Example('can validate and fail using a type alias',
    Given(`type UnprivilegedPort = Integer[1024,65537] assert_type('UnprivilegedPort', 345)`),
    Evaluates_with(Error(/expects an UnprivilegedPort value, got Integer\[345, 345\]/))),

  Example('will use infer_set to report detailed information about complex mismatches',
    Given(`assert_type(Struct[{a=>Integer,b=>Boolean}], {a=>hej,x=>s})`),
    Evaluates_with(
        Error(/entry 'a' expects an Integer value, got String/, /expects a value for key 'b'/, /unrecognized key 'x'/))),
)
