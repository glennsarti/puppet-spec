Examples('the then function',
  Example('calls a lambda passing one argument',
    Given(`then(testing) |$x| { notice($x) }`),
    Evaluates_with(Notice('testing'))),

  Example('produces what lambda returns',
    Given(`then(1) |$x| { 'testing' }`),
    Evaluates_to('testing')),

  Example('does not call lambda if argument is undef',
    Given(`then(undef) |$x| { notice('testing') }`),
    Evaluates_with(Notice(Exclude('testing')))),

  Example('produces undef if given value is undef',
    Given(`then(undef) |$x| { notice('testing') }`),
    Evaluates_to(undef)),

  Example('errors when lambda wants too many args',
    Given(`then(1) |$x, $y| { }`),
    Evaluates_with(Error(Issue(PCORE_ILLEGAL_ARGUMENTS, message => /block expects 1 argument, got 2/)))),

  Example('errors when lambda wants too few args',
    Given(`then(1) || { }`),
    Evaluates_with(Error(Issue(PCORE_ILLEGAL_ARGUMENTS, message => /block expects 1 argument, got none/)))),
)