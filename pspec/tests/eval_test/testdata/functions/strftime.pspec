Examples('the strftime function',
  Examples('when applied to a Timespan',
    {hours => 'H', minutes => 'M', seconds => 'S'}.map |$name, $fd| {
      Examples("using format %${fd}",
        Given(Scope(name => $name, fd => $fd)),

        Example("%${fd} width defaults to 2",
          Given(`strftime(Timespan($name => 3), "%$fd")`),
          Evaluates_to('03')),

        Example("%_${fd} pads with space",
          Given(`strftime(Timespan($name => 3), "%_${fd}")`),
          Evaluates_to(' 3')),

        Example("%-${fd} does not pad",
          Given(`strftime(Timespan($name => 3), "%-${fd}")`),
          Evaluates_to('3')),

        Example("%10${fd} pads with zeroes to specified width",
          Given(`strftime(Timespan($name => 3), "%10${fd}")`),
          Evaluates_to('0000000003')),

        Example("%_10${fd} pads with space to specified width",
          Given(`strftime(Timespan($name => 3), "%_10${fd}")`),
          Evaluates_to('         3')),

        Example("%-10${fd} does not pad even if width is specified",
          Given(`strftime(Timespan($name => 3), "%-10${fd}")`),
          Evaluates_to('3')),
      )
    },

    { milliseconds => [[  'L', 3 ], [ '3N', 3 ]],
      nanoseconds  => [[  'N', 9 ], [ '9N', 9 ]],
      microseconds => [[ '6N', 6 ]],
    }.map |$name, $da| {
      $da.map |$d| {
        Examples("using format %${d[0]}",
          Given(Scope(name => $name, fd => $d[0], width => $d[1])),

          Example("%${d[0]} width defaults to ${d[1]}",
            Given(`strftime(Timespan($name => 3000), "%$fd")`),
            Evaluates_to(sprintf("%-${d[1]}d", 3000))),

          Example("%_${d[0]} pads with space",
            Given(`strftime(Timespan($name => 3000), "%_${fd}")`),
            Evaluates_to(sprintf("%-${d[1]}d", 3000))),

          Example("%-${d[0]} does not pad",
            Given(`strftime(Timespan($name => 3000), "%-${fd}")`),
            Evaluates_to('3000')),
        )
      }
    },

    Examples(`can format`,
      Given(Scope(
        sample4 => Timespan(string => '100-14:02:24.123400000', format => '%D-%H:%M:%S.%N'),
        sample6 => Timespan(string => '100-14:02:24.123456000', format => '%D-%H:%M:%S.%N'))),
      Example(`using all format characters, flags, and widths`,
        Given(`strftime($sample6, '%_10D%%%03H:%-M:%S.%9N')`),
        Evaluates_to('       100%014:2:24.123456000')),

      Example(`and strip excess zeroes from fragment using no-padding flag`,
        Given(`strftime($sample6, '%D-%H:%M:%S.%-N')`),
        Evaluates_to('100-14:02:24.123456')),

      Example(`and replace excess zeroes with spaces from fragment using space-padding flag and default width`,
        Given(`strftime($sample6, '%D-%H:%M:%S.%_N')`),
        Evaluates_to('100-14:02:24.123456   ')),

      Example(`and replace excess zeroes with spaces from fragment using space-padding flag and specified width`,
        Given(`strftime($sample4, '%D-%H:%M:%S.%_6N')`),
        Evaluates_to('100-14:02:24.1234  ')),

      Example(`and retain excess zeroes in fragment using default width`,
        Given(`strftime($sample4, '%D-%H:%M:%S.%N')`),
        Evaluates_to('100-14:02:24.123400000')),

      Example(`and retain excess zeroes in fragment using specified width`,
        Given(`strftime($sample4, '%D-%H:%M:%S.%6N')`),
        Evaluates_to('100-14:02:24.123400')),
    ),
  ),

  Examples('when applied to a Timestamp',
    Example('can format a timestamp with a format pattern',
      Given(`strftime(Timestamp('2016-09-23T13:14:15.123 UTC'), '%Y-%m-%d %H:%M:%S.%L %z')`),
      Evaluates_to('2016-09-23 13:14:15.123 +0000')),

    Example('can format a timestamp using a specific timezone',
      Given(`strftime(Timestamp('2016-09-23T13:14:15.123 UTC'), '%Y-%m-%d %H:%M:%S.%L %z', 'EST')`),
      Evaluates_to('2016-09-23 08:14:15.123 -0500')),
  ),
)
