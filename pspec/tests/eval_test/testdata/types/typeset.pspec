Examples(`TypeSet type`,
  Examples('allowes declaration that',
    Example(`lacks both 'types' and 'references'`,
      Given(@(SRC)),
        type MySet = TypeSet[{
          pcore_version => '1.0.0'
        }]
        type(MySet, generalized)
        |-SRC
      Evaluates_to(Type[TypeSet])),

    Example(`has only 'references'`,
      Given(@(SRC)),
        type FirstSet = TypeSet[{
          version => '1.0.0',
          pcore_version => '1.0.0',
          types => {
            Car => Object[{}]
          }
        }]
        type SecondSet = TypeSet[{
          version => '1.0.0',
          pcore_version => '1.0.0',
          references => {
            First => {
              name => 'FirstSet',
              version_range => '1.x'
            }
          }
        }]
        type(SecondSet, generalized)
        |-SRC
      Evaluates_to(Type[TypeSet])),

    Examples('uses bracket-less form',
      Example('on the TypeSet itself',
        Given(@(SRC)),
          type TS = TypeSet { pcore_version => '1.0.0' }
          TS =~ Type[TypeSet]
          |-SRC
        Evaluates_to(true)),

      Example('without prefix on declared types (implies Object)',
        Given(@(SRC)),
          type TS = TypeSet {
            pcore_version => '1.0.0',
            types => {
              MyObject => { attributes => { a => Integer} }
            }
          }
          TS::MyObject =~ Type
          |-SRC
        Evaluates_to(true)),

      Example(`prefixed with QREF 'Object' on declared types`,
        Given(@(SRC)),
          type TS = TypeSet {
            pcore_version => '1.0.0',
            types => {
              MyObject => Object { attributes => { a => Integer} }
            }
          }
          TS::MyObject =~ Type
          |-SRC
        Evaluates_to(true)),

      Example(`prefixed with QREF to declare parent on declared types`,
        Given(@(SRC)),
          type TS = TypeSet {
            pcore_version => '1.0.0',
            types => {
              MyObject => { attributes => { a => String }},
              MySecondObject => MyObject { attributes => { b => String }}
            }
          }
          [
            TS::MyObject =~ Type,
            TS::MySecondObject =~ Type,
            TS::MySecondObject < TS::MyObject,
            TS::MySecondObject > TS::MyObject,
            TS::MySecondObject == TS::MyObject,
          ]
          |-SRC
        Evaluates_to([true, true, true, false, false])),

      Example(`errors when parent is specified both before and inside the hash`,
        Given(@(SRC)),
          type TS = TypeSet {
            pcore_version => '1.0.0',
            types => {
              MyObject => { attributes => { a => String }},
              MySecondObject => MyObject { parent => MyObject, attributes => { b => String }}
            }
          }
          TS::MySecondObject =~ Type
          |-SRC
        Evaluates_with(Error(Issue(EVAL_DUPLICATE_KEY, key => 'parent')))),

    ),
  ),

  Examples('does not allow',
    Example('missing pcore_version',
      Given(@(SRC)),
        type MySet = TypeSet {
          version => '1.0.0'
        }
        type(MySet, generalized)
        |-SRC
      Evaluates_with(Error(EVAL_TYPE_MISMATCH, /expects a value for key 'pcore_version'/))),

    Example('version is invalid',
      Given(@(SRC)),
        type MySet = TypeSet {
          version => '1.x',
          pcore_version => '1.0.0'
        }
        type(MySet, generalized)
        |-SRC
      Evaluates_with(Error(Issue(EVAL_INVALID_VERSION, str => '1.x')))),

    Example('pcore_version is invalid',
      Given(@(SRC)),
        type MySet = TypeSet {
          pcore_version => '1.x'
        }
        type(MySet, generalized)
        |-SRC
      Evaluates_with(Error(Issue(EVAL_INVALID_VERSION, str => '1.x')))),

    Example('pcore_version is not handled by this runtime',
      Given(@(SRC)),
        type MySet = TypeSet {
          pcore_version => '2.0.0'
        }
        type(MySet, generalized)
        |-SRC
      Evaluates_with(Error(Issue(EVAL_UNHANDLED_PCORE_VERSION,
        expected_range => SemVerRange('1.x'), pcore_version => SemVer('2.0.0'))))),

    Example('name authority is an invalid URI',
      Given(@(SRC)),
        type MySet = TypeSet {
          pcore_version => '1.0.0',
          name_authority => 'not a valid URI'
        }
        type(MySet, generalized)
        |-SRC
      Evaluates_with(Error(Issue(EVAL_INVALID_URI,
        str => 'not a valid URI')))),

    Example('pcore_uri an invalid URI',
      Given(@(SRC)),
        type MySet = TypeSet {
          pcore_version => '1.0.0',
          pcore_uri => 'not a valid URI'
        }
        type(MySet, generalized)
        |-SRC
      Evaluates_with(Error(Issue(EVAL_INVALID_URI,
        str => 'not a valid URI')))),

    Examples('a types hash',
      Example('which is empty',
        Given(@(SRC)),
          type MySet = TypeSet {
            pcore_version => '1.0.0',
            types => {}
          }
          type(MySet, generalized)
          |-SRC
        Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'types' expects size to be at least 1, got 0`))))),

      Example('which is not a hash',
        Given(@(SRC)),
          type MySet = TypeSet {
            pcore_version => '1.0.0',
            types => []
          }
          type(MySet, generalized)
          |-SRC
        Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'types' expects a Hash value, got Array`))))),

      Example('contains values that are not types',
        Given(@(SRC)),
          type MySet = TypeSet {
            pcore_version => '1.0.0',
            types => {
               car => Integer
            }
          }
          type(MySet, generalized)
          |-SRC
        Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'types' key of entry 'car' expects a match for Pattern`))))),
    ),

    Examples('a references hash that',
      Example('which is empty',
        Given(@(SRC)),
          type MySet = TypeSet {
            pcore_version => '1.0.0',
            references => {}
          }
          type(MySet, generalized)
          |-SRC
        Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'references' expects size to be at least 1, got 0`))))),

      Example('is not a hash',
        Given(@(SRC)),
          type MySet = TypeSet {
            pcore_version => '1.0.0',
            references => []
          }
          type(MySet, generalized)
          |-SRC
        Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'references' expects a Hash value, got Array`))))),

      Example('contains something other than reference initialization hashes',
        Given(@(SRC)),
          type MySet = TypeSet {
            pcore_version => '1.0.0',
            references => {Ref => 2}
          }
          type(MySet, generalized)
          |-SRC
        Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'references' entry 'Ref' expects a Struct value, got Integer`))))),

      Example('contains several initialization that refers to the same TypeSet',
        Given(@(SRC)),
          type MySet = TypeSet {
            pcore_version => '1.0.0',
            references => {
              A => { name => 'Vehicle::Cars', version_range => '1.x' },
              V => { name => 'Vehicle::Cars', version_range => '1.x' },
            }
          }
          type(MySet, generalized)
          |-SRC
        Evaluates_with(Error(Issue(EVAL_TYPESET_REFERENCE_OVERLAP, name => 'MySet', ref_name => 'Vehicle::Cars')))),

      Example('contains an initialization maps with an alias that collides with a type name',
        Given(@(SRC)),
          type MySet = TypeSet {
            pcore_version => '1.0.0',
            types => {
              Car => Object[{}]
            },
            references => {
              Car => { name => 'Vehicle::Car', version_range => '1.x' }
            }
          }
          type(MySet, generalized)
          |-SRC
        Evaluates_with(Error(Issue(EVAL_TYPESET_ALIAS_COLLIDES, name => 'MySet', ref_alias => 'Car')))),

      Examples('contains an initialization hash that',
        Example('has no version range',
          Given(@(SRC)),
            type MySet = TypeSet {
              pcore_version => '1.0.0',
              references => { Ref => { name => 'X' } }
            }
            type(MySet, generalized)
            |-SRC
          Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'references' entry 'Ref' expects a value for key 'version_range'`))))),

        Example('has no name',
          Given(@(SRC)),
            type MySet = TypeSet {
              pcore_version => '1.0.0',
              references => { Ref => { version_range => '1.x' } }
            }
            type(MySet, generalized)
            |-SRC
          Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'references' entry 'Ref' expects a value for key 'name'`))))),

        Example('has a name that is not a QRef',
          Given(@(SRC)),
            type MySet = TypeSet {
              pcore_version => '1.0.0',
              references => { Ref => { name => 'cars', version_range => '1.x' } }
            }
            type(MySet, generalized)
            |-SRC
          Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'references' entry 'Ref' entry 'name' expects a match for Pattern`))))),

        Example('has a version_range that is not a valid SemVer range',
          Given(@(SRC)),
            type MySet = TypeSet {
              pcore_version => '1.0.0',
              references => { Ref => { name => 'Cars', version_range => 'N' } }
            }
            type(MySet, generalized)
            |-SRC
          Evaluates_with(Error(Issue(EVAL_INVALID_VERSION_RANGE, str => 'N')))),

        Example('has an alias that is not a SimpleName',
          Given(@(SRC)),
            type MySet = TypeSet {
              pcore_version => '1.0.0',
              references => { 'cars' => { name => 'X', version_range => '1.x' } }
            }
            type(MySet, generalized)
            |-SRC
          Evaluates_with(Error(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`'references' key of entry 'cars' expects a match for Pattern`))))),

      ),
    ),
  ),

  Examples('can declare a type that',
    Example('is an alias',
      Given(@(SRC)),
        type MySet = TypeSet {
          pcore_version => '1.0.0',
          types => { PositiveInt => Integer[0, default] }
        }
        String(MySet::PositiveInt)
        |-SRC
      Evaluates_to(`MySet::PositiveInt`)),

    Example('references other types in the same set',
      Given(@(SRC)),
        type MySet = TypeSet {
          pcore_version => '1.0.0',
          types => {
            Real => Float,
            Complex => Object[{
              attributes => {
                real => Real,
                imaginary => Real
              }
            }]
          }
        }
        String(MySet::Complex(3.0, 4.0))
        |-SRC
      Evaluates_to(`MySet::Complex('real' => 3.00000, 'imaginary' => 4.00000)`)),

    Example('locally overrides a type in the root namespace',
      Given(@(SRC)),
        type PInt = Integer[0,99]
        type MySet = TypeSet {
          pcore_version => '1.0.0',
          types => {
            PInt => Integer[0],
            Obj => Object[{
              attributes => {
                ping => PInt
              }
            }]
          }
        }
        String(MySet::Obj(300))
        |-SRC
      Evaluates_to(`MySet::Obj('ping' => 300)`)),

    Example('references itself',
      Given(@(SRC)),
        type MySet = TypeSet {
          pcore_version => '1.0.0',
          types => {
            Tree => Hash[String,Variant[String,Tree]]
          }
        }
        MySet::Tree.assert_type('a' => { 'b' => 'c' })
        |-SRC
      Evaluates_to({'a' => {'b' => 'c'}})),

    Example('references types in another type set',
      Given(@(SRC)),
        type Vehicles = TypeSet {
          version => '1.0.0',
          pcore_version => '1.0.0',
          types => {
            Car => { constants => { wheels => 4 } },
            Bicycle => { constants => { wheels => 2 } }
          }
        }
        type MySet = TypeSet {
          version => '1.0.0',
          pcore_version => '1.0.0',
          types => {
            Transports => Variant[Vecs::Car,Vecs::Bicycle]
          },
          references => {
            Vecs => {
              name => 'Vehicles',
              version_range => '1.x'
            }
          }
        }
        $x = Vehicles::Car()
        MySet::Transports.assert_type($x).wheels
        |-SRC
      Evaluates_to(4)),

    Example('references types in a type set referenced by another type set',
      Given(@(SRC)),
        type Vehicles = TypeSet {
          version => '1.0.0',
          pcore_version => '1.0.0',
          types => {
            Car => { constants => { wheels => 4 } },
            Bicycle => { constants => { wheels => 2 } }
          }
        }
        type Transports = TypeSet {
          version => '1.0.0',
          pcore_version => '1.0.0',
          types => {
            Transports => Variant[Vecs::Car,Vecs::Bicycle]
          },
          references => {
            Vecs => {
              name => 'Vehicles',
              version_range => '1.x'
            }
          }
        }
        type MySet = TypeSet {
          version => '1.0.0',
          pcore_version => '1.0.0',
          types => {
            MotorPowered => Variant[T::Vecs::Car],
            Pedaled => Variant[T::Vecs::Bicycle],
            All => T::Transports
          },
          references => {
            T => {
              name => 'Transports',
              version_range => '1.x'
            }
          }
        }
        [
          MySet::MotorPowered.assert_type(Vehicles::Car()).wheels,
          MySet::Pedaled.assert_type(Vehicles::Bicycle()).wheels
        ]
        |-SRC
      Evaluates_to([4, 2])),
  ),
)