Examples('Timespan type',
  Example('is an instance of its meta type',
    Given(@(SRC)),
      Timespan =~ Type[Timespan]
      |-SRC
    Evaluates_to(true)),

  Example('is equal to itself',
    Given(@(SRC)),
      Timespan == Timespan
      |-SRC
    Evaluates_to(true)),

  Example('is not less than itself',
    Given(@(SRC)),
      Timespan < Timespan
      |-SRC
    Evaluates_to(false)),

  Example('is not greater than itself',
    Given(@(SRC)),
      Timespan > Timespan
      |-SRC
    Evaluates_to(false)),

  Example('does not consider an Integer to be an instance',
    Given(@(SRC)),
      1234 =~ Timespan
      |-SRC
    Evaluates_to(false)),

  Example('does not consider a Float to be an instance',
    Given(@(SRC)),
      1234.0 =~ Timespan
      |-SRC
    Evaluates_to(false)),

  Examples('when parameterized',
    Example('is equal other Timespan types with equal parameters',
      Given(@(SRC)),
        [
          Timespan['01:00:00', '13:00:00'] == Timespan['01:00:00', '13:00:00'],
          Timespan['01:00:00', '13:00:00'] != Timespan['01:12:20', '13:00:00'],
        ]
        |-SRC
      Evaluates_to([true, true])),

    Example('using just one parameter is the same as using default for the second parameter',
      Given(@(SRC)),
        Timespan['01:00:00'] == Timespan['01:00:00', default]
        |-SRC
      Evaluates_to(true)),

    Example('orders parameterized types based on range inclusion',
      Given(@(SRC)),
        [
          Timespan['01:00:00', '13:00:00'] < Timespan['00:00:00', '14:00:00'],
          Timespan['01:00:00', '13:00:00'] > Timespan['00:00:00', '14:00:00']
        ]
        |-SRC
      Evaluates_to([true, false])),
  ),

  Examples('instance',
    Example('can be created from a string',
      Given(@(SRC)),
        Timespan('3-11:00')
        |-SRC
      Evaluates_to(Timespan(days => 3, hours => 11))),

    Example('can be created from a string and format',
      Given(@(SRC)),
        Timespan('1d11h23m', '%Dd%Hh%Mm')
        |-SRC
      Evaluates_to(Timespan(days => 1, hours => 11, minutes => 23))),

    Example('can be created from a hash with string and format',
      Given(@(SRC)),
        Timespan(string => '1d11h23m', format => '%Dd%Hh%Mm')
        |-SRC
      Evaluates_to(Timespan(days => 1, hours => 11, minutes => 23))),

    Example('can be created from a string and array of formats',
      Given(@(SRC)),
        $fmts = ['%Dd%Hh%Mm%Ss', '%Hh%Mm%Ss', '%Dd%Hh%Mm', '%Dd%Hh', '%Hh%Mm', '%Mm%Ss', '%Dd', '%Hh', '%Mm', '%Ss' ]
        [
          String(Timespan('1d11h23m13s', $fmts)),
          String(Timespan('11h23m13s', $fmts)),
          String(Timespan('1d11h23m', $fmts)),
          String(Timespan('1d11h', $fmts)),
          String(Timespan('11h23m', $fmts)),
          String(Timespan('23m13s', $fmts)),
          String(Timespan('1d', $fmts)),
          String(Timespan('11h', $fmts)),
          String(Timespan('23m', $fmts)),
          String(Timespan('13s', $fmts)),
        ]
        |-SRC
      Evaluates_to([
        '1-11:23:13.0',
        '0-11:23:13.0',
        '1-11:23:00.0',
        '1-11:00:00.0',
        '0-11:23:00.0',
        '0-00:23:13.0',
        '1-00:00:00.0',
        '0-11:00:00.0',
        '0-00:23:00.0',
        '0-00:00:13.0'
      ])),

    Example('cannot be created using an empty formats array',
      Given(@(SRC)),
        Timespan('1d11h23m13s', [])
        |-SRC
      Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENTS))),

    Example('can be created from a integer that represents seconds',
      Given(@(SRC)),
        Timespan(6800)
        |-SRC
      Evaluates_to(Timespan(hours => 1, minutes => 53, seconds => 20))),

    Example('can be created from a float that represents seconds with fraction',
      Given(@(SRC)),
        Timespan(6800.123456789)
        |-SRC
      Evaluates_to(Timespan(hours => 1, minutes => 53, seconds => 20, nanoseconds => 123456789))),

    Example('matches the appropriate parameterized type',
      Given(@(SRC)),
        Timespan('3-11:12:13') =~ Timespan['3-00:00:00', '4-00:00:00']
        |-SRC
      Evaluates_to(true)),

    Example('does not match an inappropriate parameterized type',
      Given(@(SRC)),
        Timespan('1-03:04:05') =~ Timespan['2-00:00:00', '3-00:00:00']
        |-SRC
      Evaluates_to(false)),

    Example('can be compared to other instances',
      Given(@(SRC)),
        $o1 = Timespan('00:00:01')
        $o2 = Timespan('00:00:02')
        $o3 = Timespan('00:00:02')
        [
        $o1 > $o3,
        $o1 >= $o3,
        $o1 < $o3,
        $o1 <= $o3,
        $o1 == $o3,
        $o1 != $o3,
        $o2 > $o3,
        $o2 < $o3,
        $o2 >= $o3,
        $o2 <= $o3,
        $o2 == $o3,
        $o2 != $o3,
        ]
        |-SRC
      Evaluates_to([false, false, true, true, false, true, false, false, true, true, true, false])),

    Example('can be compared to integer that represents seconds',
      Given(@(SRC)),
        $o1 = Timespan('00:00:01')
        $o2 = Timespan('00:00:02')
        $o3 = 2
        [
          $o1 > $o3,
          $o1 >= $o3,
          $o1 < $o3,
          $o1 <= $o3,
          $o2 > $o3,
          $o2 < $o3,
          $o2 >= $o3,
          $o2 <= $o3,
         ]
        |-SRC
      Evaluates_to([false, false, true, true, false, false, true, true])),

    Example('integer that represents seconds can be compared to it',
      Given(@(SRC)),
        $o1 = 1
        $o2 = 2
        $o3 = Timespan('00:00:02')
        [
          $o1 > $o3,
          $o1 >= $o3,
          $o1 < $o3,
          $o1 <= $o3,
          $o2 > $o3,
          $o2 < $o3,
          $o2 >= $o3,
          $o2 <= $o3,
        ]
        |-SRC
      Evaluates_to([false, false, true, true, false, false, true, true])),

    Example('can be compared to float that represents seconds with fraction',
      Given(@(SRC)),
        $o1 = Timespan('01.123456789', '%S.%N')
        $o2 = Timespan('02.123456789', '%S.%N')
        $o3 = 2.123456789
        [
          $o1 > $o3,
          $o1 >= $o3,
          $o1 < $o3,
          $o1 <= $o3,
          $o2 > $o3,
          $o2 < $o3,
          $o2 >= $o3,
          $o2 <= $o3,
         ]
        |-SRC
      Evaluates_to([false, false, true, true, false, false, true, true])),

    Example('float that represents seconds with fraction can be compared to it',
      Given(@(SRC)),
        $o1 = 1.123456789
        $o2 = 2.123456789
        $o3 = Timespan('02.123456789', '%S.%N')
        [
          $o1 > $o3,
          $o1 >= $o3,
          $o1 < $o3,
          $o1 <= $o3,
          $o2 > $o3,
          $o2 < $o3,
          $o2 >= $o3,
          $o2 <= $o3,
        ]
        |-SRC
      Evaluates_to([false, false, true, true, false, false, true, true])),
  ),
)