Examples('Timestamp type',
  Example('is an instance of its meta type',
    Given(@(SRC)),
      Timestamp =~ Type[Timestamp]
      |-SRC
    Evaluates_to(true)),

  Example('is equal to itself',
    Given(@(SRC)),
      Timestamp == Timestamp
      |-SRC
    Evaluates_to(true)),

  Example('is not less than itself',
    Given(@(SRC)),
      Timestamp < Timestamp
      |-SRC
    Evaluates_to(false)),

  Example('is not greater than itself',
    Given(@(SRC)),
      Timestamp > Timestamp
      |-SRC
    Evaluates_to(false)),

  Example('does not consider an Integer to be an instance',
    Given(@(SRC)),
      1234 =~ Timestamp
      |-SRC
    Evaluates_to(false)),

  Example('does not consider a Float to be an instance',
    Given(@(SRC)),
      1234.0 =~ Timestamp
      |-SRC
    Evaluates_to(false)),

  Examples('when parameterized',
    Example('is equal other Timestamp types with equal parameters',
      Given(@(SRC)),
        [
          Timestamp['2015-03-01', '2016-01-01'] == Timestamp['2015-03-01', '2016-01-01'],
          Timestamp['2015-03-01', '2016-01-01'] != Timestamp['2015-11-03', '2016-12-24'],
        ]
        |-SRC
      Evaluates_to([true, true])),

    Example('using just one parameter is the same as using default for the second parameter',
      Given(@(SRC)),
        Timestamp['2015-03-01'] == Timestamp['2015-03-01', default]
        |-SRC
      Evaluates_to(true)),

    Example('orders parameterized types based on range inclusion',
      Given(@(SRC)),
        [
          Timestamp['2015-03-01', '2015-09-30'] < Timestamp['2015-02-01', '2015-10-30'],
          Timestamp['2015-03-01', '2015-09-30'] > Timestamp['2015-02-01', '2015-10-30']
        ]
        |-SRC
      Evaluates_to([true, false])),
  ),

  Examples('instance',
    Example('can be created from a string with just a date',
      Given(@(SRC)),
        Timestamp('2015-03-01')
        |-SRC
      Evaluates_to(Timestamp('2015-03-01T00:00:00.000000000 UTC'))),

    Example('can be created from a string and time separated by "T"',
      Given(@(SRC)),
        Timestamp('2015-03-01T11:12:13')
        |-SRC
      Evaluates_to(Timestamp('2015-03-01T11:12:13.000000000 UTC'))),

    Example('can be created from a string and time separated by space',
      Given(@(SRC)),
        Timestamp('2015-03-01 11:12:13')
        |-SRC
      Evaluates_to(Timestamp('2015-03-01T11:12:13.000000000 UTC'))),

    Example('errors when none of the default formats can parse the string',
      Given(@(SRC)),
        Timestamp('2015#03#01 11:12:13')
        |-SRC
      Evaluates_with(Error(PCORE_TIMESTAMP_CANNOT_BE_PARSED))),

    Example('errors when only part of the string is parsed',
      Given(@(SRC)),
        Timestamp('2015-03-01T11:12:13 bogus after')
        |-SRC
      Evaluates_with(Error(PCORE_TIMESTAMP_CANNOT_BE_PARSED))),

    Example('can be created from a string and format',
      Given(@(SRC)),
        Timestamp('Sunday, 28 August, 2016', '%A, %d %B, %Y')
        |-SRC
      Evaluates_to(Timestamp('2016-08-28T00:00:00.000000000 UTC'))),

    Example('can be created from a string, format, and a timezone',
      Given(@(SRC)),
        Timestamp('Sunday, 28 August, 2016', '%A, %d %B, %Y', 'EST')
        |-SRC
      Evaluates_to(Timestamp('2016-08-28T05:00:00.000000000 UTC'))),

    Example('can be created from a string and format with timezone designator',
      Given(@(SRC)),
        Timestamp('Friday, 9 February 06:00:00, 2018 EST', '%A, %-d %B %T, %Y %Z')
        |-SRC
      Evaluates_to(Timestamp('2018-02-09T11:00:00.000000000 UTC'))),

    Example('can not be created from a string, format with timezone designator, and a timezone',
      Given(@(SRC)),
        Timestamp('Sunday, 28 August, 2016 UTC', '%A, %d %B, %Y %Z', 'EST')
        |-SRC
      Evaluates_with(Error(Issue(PCORE_TIMESTAMP_TZ_AMBIGUITY, parsed => 'UTC', given => 'EST')))),

    Example('can be created from a hash with string and format',
      Given(@(SRC)),
        Timestamp(string => 'Sunday, 28 August, 2016', format => '%A, %d %B, %Y')
        |-SRC
      Evaluates_to(Timestamp('2016-08-28T00:00:00.000000000 UTC'))),

    Example('can be created from a hash with string, format, and a timezone',
      Given(@(SRC)),
        Timestamp({ string => 'Sunday, 28 August, 2016', format => '%A, %d %B, %Y', timezone => 'EST' })
        |-SRC
      Evaluates_to(Timestamp('2016-08-28T05:00:00.000000000 UTC'))),

    Example('can be created from a string and array of formats',
      Given(@(SRC)),
        $fmts = ['%A, %d %B, %Y at %r', '%b %d, %Y, %l:%M %P', '%y-%m-%d %H:%M:%S %Z']
        [
          String(Timestamp('Sunday, 28 August, 2016 at 12:15:00 PM', $fmts)),
          String(Timestamp('Jul 24, 2016, 1:20 am', $fmts)),
          String(Timestamp('16-06-21 18:23:15 UTC', $fmts)),
        ]
        |-SRC
      Evaluates_to([
        '2016-08-28T12:15:00.000000000 UTC',
        '2016-07-24T01:20:00.000000000 UTC',
        '2016-06-21T18:23:15.000000000 UTC'
      ])),

    Example('cannot be created using an empty formats array',
      Given(@(SRC)),
        Timestamp('2015-03-01T11:12:13', [])
        |-SRC
      Evaluates_with(Error(PCORE_ILLEGAL_ARGUMENTS))),

    Example('can be created from a integer that represents seconds',
      Given(@(SRC)),
        Timespan(6800)
        |-SRC
      Evaluates_to(Timespan(hours => 1, minutes => 53, seconds => 20))),

    Example('can be created from a float that represents seconds with fraction',
      Given(@(SRC)),
        Timespan(6800.123456789)
        |-SRC
      Evaluates_to(Timespan(hours => 1, minutes => 53, seconds => 20, nanoseconds => 123456789))),

    Example('matches the appropriate parameterized type',
      Given(@(SRC)),
        Timespan('3-11:12:13') =~ Timespan['3-00:00:00', '4-00:00:00']
        |-SRC
      Evaluates_to(true)),

    Example('does not match an inappropriate parameterized type',
      Given(@(SRC)),
        Timespan('1-03:04:05') =~ Timespan['2-00:00:00', '3-00:00:00']
        |-SRC
      Evaluates_to(false)),

    Example('can be compared to other instances',
      Given(@(SRC)),
        $o1 = Timespan('00:00:01')
        $o2 = Timespan('00:00:02')
        $o3 = Timespan('00:00:02')
        [
        $o1 > $o3,
        $o1 >= $o3,
        $o1 < $o3,
        $o1 <= $o3,
        $o1 == $o3,
        $o1 != $o3,
        $o2 > $o3,
        $o2 < $o3,
        $o2 >= $o3,
        $o2 <= $o3,
        $o2 == $o3,
        $o2 != $o3,
        ]
        |-SRC
      Evaluates_to([false, false, true, true, false, true, false, false, true, true, true, false])),

    Example('can be compared to integer that represents seconds',
      Given(@(SRC)),
        $o1 = Timespan('00:00:01')
        $o2 = Timespan('00:00:02')
        $o3 = 2
        [
          $o1 > $o3,
          $o1 >= $o3,
          $o1 < $o3,
          $o1 <= $o3,
          $o2 > $o3,
          $o2 < $o3,
          $o2 >= $o3,
          $o2 <= $o3,
         ]
        |-SRC
      Evaluates_to([false, false, true, true, false, false, true, true])),

    Example('integer that represents seconds can be compared to it',
      Given(@(SRC)),
        $o1 = 1
        $o2 = 2
        $o3 = Timespan('00:00:02')
        [
          $o1 > $o3,
          $o1 >= $o3,
          $o1 < $o3,
          $o1 <= $o3,
          $o2 > $o3,
          $o2 < $o3,
          $o2 >= $o3,
          $o2 <= $o3,
        ]
        |-SRC
      Evaluates_to([false, false, true, true, false, false, true, true])),

    Example('can be compared to float that represents seconds with fraction',
      Given(@(SRC)),
        $o1 = Timespan('01.123456789', '%S.%N')
        $o2 = Timespan('02.123456789', '%S.%N')
        $o3 = 2.123456789
        [
          $o1 > $o3,
          $o1 >= $o3,
          $o1 < $o3,
          $o1 <= $o3,
          $o2 > $o3,
          $o2 < $o3,
          $o2 >= $o3,
          $o2 <= $o3,
         ]
        |-SRC
      Evaluates_to([false, false, true, true, false, false, true, true])),

    Example('float that represents seconds with fraction can be compared to it',
      Given(@(SRC)),
        $o1 = 1.123456789
        $o2 = 2.123456789
        $o3 = Timespan('02.123456789', '%S.%N')
        [
          $o1 > $o3,
          $o1 >= $o3,
          $o1 < $o3,
          $o1 <= $o3,
          $o2 > $o3,
          $o2 < $o3,
          $o2 >= $o3,
          $o2 <= $o3,
        ]
        |-SRC
      Evaluates_to([false, false, true, true, false, false, true, true])),
  ),
)