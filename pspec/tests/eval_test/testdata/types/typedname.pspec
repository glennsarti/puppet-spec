Examples('TypedName type',
  Example('is an instance of its meta type',
    Given(@(SRC)),
      TypedName =~ Type[TypedName]
      |-SRC
    Evaluates_to(true)),

  Examples('instance',
    Example('can be created from a namespace and a name',
      Given(@(SRC)),
        String(TypedName('function', 'Foo::Bar'))
        |-SRC
      Evaluates_to(`TypedName('namespace' => 'function', 'name' => 'Foo::Bar')`)),


    Example('can return parent',
      Given(@(SRC)),
        String(TypedName('function', 'Foo::Bar').parent)
        |-SRC
    Evaluates_to(`TypedName('namespace' => 'function', 'name' => 'Foo')`)),

    Example('can return child',
      Given(@(SRC)),
        String(TypedName('function', 'Foo::Bar').child)
        |-SRC
    Evaluates_to(`TypedName('namespace' => 'function', 'name' => 'Bar')`)),

    Example('can determine if parent',
      Given(@(SRC)),
        TypedName('function', 'Foo::Bar').is_parent(TypedName('function', 'Foo::Bar::Zum'))
        |-SRC
    Evaluates_to(true)),

    Example('can determine if not parent',
      Given(@(SRC)),
        TypedName('function', 'Foo::Zum').is_parent(TypedName('function', 'Foo::Bar::Zum'))
        |-SRC
    Evaluates_to(false)),

    Example('can return relative to',
      Given(@(SRC)),
        String(TypedName('function', 'Foo::Bar::Baz::Zum').relative_to(TypedName('function', 'Foo::Bar')))
        |-SRC
    Evaluates_to(`TypedName('namespace' => 'function', 'name' => 'Baz::Zum')`)),
  ),
)