Examples('tasks are loaded',
  Let('module_path', Directory(
    'mod' => {
      'tasks' => {
        'generic' => '# does nothing',

        'init' => '# does nothing',
        'init.json' => @(JSON),
          {
            "parameters": {
              "txt": {
                "type": "Optional[String]"
              }
            }
          }
          |JSON

        'with_meta' => '# does nothing',
        'with_meta.json' => @(JSON),
          {
            "parameters": {
              "message": {
                "type": "String",
                "description": "the message",
                "sensitive": false
              },
              "font": {
                "type": "Optional[String]"
              }
            }
          }
          |JSON

        'non_data' => '# does nothing',
        'non_data.json' => @(JSON),
          {
            "parameters": {
              "arg": {
                "type": "Hash",
                "description": "the non data param"
              }
            }
          }
          |JSON

        'empty_params' => '# does nothing',
        'empty_params.json' => '{ "parameters": {} }',

        'no_params' => '# does nothing',
        'no_params.json' => '{}',
        },
    }
  )),

  Let('tasks_dir', Format('%s/mod/tasks', Get('module_path'))),

  Given(Settings('module_path' => Get('module_path'))),

  Examples('are loaded',

    Example('with no metadata',
      Given(@(SRC)),
        $t = load_task('mod::generic')
        [String($t), String(type($t))]
        |-SRC
      Evaluates_to([
        Format(`Task('name' => 'mod::generic', 'executable' => '%s/generic')`, Get('tasks_dir')),
        `Task`
      ])),

    Example('with metadata',
      Given(@(SRC)),
        String(load_task('mod::with_meta'))
        |-SRC
      Evaluates_to(Format(
        `Task('name' => 'mod::with_meta', 'executable' => '%s/with_meta', 'parameters' => {'font' => {'type' => Optional[String]}, 'message' => {'description' => 'the message', 'sensitive' => false, 'type' => String}})`,
        Get('tasks_dir')))),

    Example('with non-Data parameter',
      Given(@(SRC)),
        String(load_task('mod::non_data'))
        |-SRC
      Evaluates_to(Format(
        `Task('name' => 'mod::non_data', 'executable' => '%s/non_data', 'parameters' => {'arg' => {'description' => 'the non data param', 'type' => Hash}})`,
        Get('tasks_dir')))),

    Example('with no parameters',
      Given(@(SRC)),
        String(load_task('mod::no_params'))
        |-SRC
      Evaluates_to(Format(`Task('name' => 'mod::no_params', 'executable' => '%s/no_params')`, Get('tasks_dir')))),

    Example('with empty parameters',
      Given(@(SRC)),
        String(load_task('mod::empty_params'))
        |-SRC
      Evaluates_to(Format(
        `Task('name' => 'mod::empty_params', 'executable' => '%s/empty_params', 'parameters' => {})`, Get('tasks_dir')))),

    Example('with module name',
      Given(@(SRC)),
        String(load_task('mod'))
        |-SRC
      Evaluates_to(Format(
        `Task('name' => 'mod', 'executable' => '%s/init', 'parameters' => {'txt' => {'type' => Optional[String]}})`, Get('tasks_dir')))),

    Example('with adjacent directory for init task',
      Let('module_path', Directory(
        'mod' => {
          'tasks' => {
            'init' => {
              'foo.sh' => 'echo hello'
            },
            'init.sh' => 'echo hello',
            'init.json' => @(JSON),
            {
              "parameters": {
                 "txt": { "type": "String" }
              }
            }
            |JSON
          }
        })),

      Given(@(SRC)),
        String(load_task('mod'))
        |-SRC
      Evaluates_to(Format(
        `Task('name' => 'mod', 'executable' => '%s/init.sh', 'parameters' => {'txt' => {'type' => String}})`, Get('tasks_dir')))),

    Example('with adjacent directory for named task',
      Let('module_path', Directory(
        'mod' => {
          'tasks' => {
            'hello' => {
              'foo.sh' => 'echo hello'
            },
            'hello.sh' => 'echo hello',
            'hello.json' => @(JSON),
            {
              "parameters": {
                 "txt": { "type": "String" }
              }
            }
            |JSON
          }
        })),

      Given(@(SRC)),
        String(load_task('mod::hello'))
        |-SRC
      Evaluates_to(Format(
        `Task('name' => 'mod::hello', 'executable' => '%s/hello.sh', 'parameters' => {'txt' => {'type' => String}})`, Get('tasks_dir')))),
  ),

  Examples('fails to load when',
    Example('more than two segments are in the name',
      Let('module_path', Directory(
        'mod' => {
          'tasks' => {
            'hello' => {
              'foo.sh' => 'echo hello'
            }
          }
        })),

      Given(@(SRC)),
        String(load_task('mod::hello::foo'))
        |-SRC
      Evaluates_with(EVAL_UNKNOWN_TASK)),

    Example('metadata has a malformed top-level entry',
      Let('module_path', Directory(
        'mod' => {
          'tasks' => {
            'hello' => 'echo hello',
            'hello.json' => @(JSON),
            {
              "supports_nop": true,
              "parameters": {
                 "message": { "type": "String" }
              }
            }
            |JSON
          }
        })),

      Given(@(SRC)),
        String(load_task('mod::hello'))
        |-SRC
      Evaluates_with(Issue(EVAL_ILLEGAL_ARGUMENTS, 'message' => Contain(`unrecognized key 'supports_nop'`)))),

    Example('metadata has a malformed parameter name',
      Let('module_path', Directory(
        'mod' => {
          'tasks' => {
            'hello' => 'echo hello',
            'hello.json' => @(JSON),
            {
              "supports_noop": true,
              "parameters": {
                 "Message": { "type": "String" }
              }
            }
            |JSON
          }
        })),

      Given(@(SRC)),
        String(load_task('mod::hello'))
        |-SRC
      Evaluates_with(Issue(EVAL_ILLEGAL_ARGUMENTS, 'message' => Contain(`key of entry 'Message' expects a match for Pattern[/\\A[a-z][a-z0-9_]*\\z/]`)))),

    Example('metadata has a puppet_task_version that is a string',
      Let('module_path', Directory(
        'mod' => {
          'tasks' => {
            'hello' => 'echo hello',
            'hello.json' => @(JSON),
            {
              "puppet_task_version": "1",
              "supports_noop": true,
              "parameters": {
                 "message": { "type": "String" }
              }
            }
            |JSON
          }
        })),

      Given(@(SRC)),
        String(load_task('mod::hello'))
        |-SRC
      Evaluates_with(Issue(EVAL_ILLEGAL_ARGUMENTS, 'message' => Contain(`'puppet_task_version' expects an Integer value, got String`)))),
  ),
)