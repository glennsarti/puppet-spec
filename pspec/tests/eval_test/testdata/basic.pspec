Examples('hash literal',
  Example('string keys',
    Given(`{ 'a' => 1, 'b' => 2 }`),
    Evaluates_to({ a => 1, b => 2 })),

  Example('qname keys',
    Given(`{ a => 1, b => 2 }`),
    Evaluates_to({ 'a' => 1, 'b' => 2 })),

  Example('integer keys',
    Given(`{ 1 => 1, 2 => 2 }`),
    Evaluates_to({ 1 => 1, 2 => 2 })),

  Example('mixed value types',
    Given(`{ a => 'one', b => 2 }`),
    Evaluates_to({ 'a' => 'one', 'b' => 2 })),

  Example('mixed string types',
    Given(`{ 'a' => 1, 2 => 2 }`),
    Evaluates_to({ a => 1, 2 => 2 })),

  Example('mixed string and value types',
    Given(`{ 'a' => a, 2 => 2 }`),
    Evaluates_to({ a => a, 2 => 2 })),
)

Examples('array literal',
  Example('integer values',
    Given(`[1, 2]`),
    Evaluates_to([1, 2])),

  Example('float values',
    Given(`[1.0, 2.0]`),
    Evaluates_to([1.0, 2.0])),

  Example('qname values',
    Given(`[a, b]`),
    Evaluates_to(['a', 'b'])),

  Example('boolean values',
    Given(`[true, false]`),
    Evaluates_to([true, false])),

  Example('mixed values',
    Given(`[a, 2.0, 34, true, false]`),
    Evaluates_to(['a', 2.0, 34, true, false])),
)

Examples('[]',
  Examples('on array',
    Example('existing index',
      Given(`[1,2,3][2]`),
      Evaluates_to(3)),

    Example('existing index and count of one',
      Given(`[1,2,3][2,1]`),
      Evaluates_to([3])),

    Example('existing index and count of one',
      Given(`[1,2,3][2,0]`),
      Evaluates_to([])),

    Example('existing index and count > 1',
      Given(`[1,2,3,4][1,2]`),
      Evaluates_to([2,3])),

    Example('index out of bounds',
      Given(`[1,2,3][100]`),
      Evaluates_to(undef)),

    Example('index and size out of bounds',
      Given(`[1,2,3][100,1]`),
      Evaluates_to([])),

    Example('existing negative index',
      Given(`[1,2,3,4][-1]`),
      Evaluates_to(4)),

    Example('existing index and negative count',
      Given(`[1,2,3,4][2,-1]`),
      Evaluates_to([3,4])),

    Example('existing  negative index and negative count',
      Given(`[1,2,3,4][-5,-3]`),
      Evaluates_to([1,2])),

    Example('existing index and negative count to same index',
      Given(`[1,2,3,4][2,-3]`),
      Evaluates_to([])),
  ),

  Examples('on hash',
    Example('existing key',
      Given(`{'a'=>1, 'b'=>2, 'c'=>3}['b']`),
      Evaluates_to(2)),

    Example('existing keys',
      Given(`{'a'=>1, 'b'=>2, 'c'=>3}['b', 'c']`),
      Evaluates_to([2, 3])),

    Example('non existing key',
      Given(`{'a'=>1, 'b'=>2, 'c'=>3}['x']`),
      Evaluates_to(undef)),

    Example('non existing keys',
      Given(`{'a'=>1, 'b'=>2, 'c'=>3}['x', 'y']`),
      Evaluates_to([])),

    Example('existing and non existing keys',
      Given(`{'a'=>1, 'b'=>2, 'c'=>3}['x', 'b']`),
      Evaluates_to([2])),
  ),

  Examples('on string',
    Example('existing index',
      Given(`"Hello World"[6]`),
      Evaluates_to("W")),

    Example('existing index and count of one',
      Given(`"Hello World"[1,3]`),
      Evaluates_to("ell")),

    Example('existing index and count of one',
      Given(`"Hello World"[6,-1]`),
      Evaluates_to("World")),

    Example('existing index and count > 1',
      Given(`"Hello World"[-5,-1]`),
      Evaluates_to("World")),

    Example('index out of bounds',
      Given(`"Hello World"[6,-2]`),
      Evaluates_to("Worl")),

    Example('index and size out of bounds',
      Given(`"Hello World"[-11,-2]`),
      Evaluates_to("Hello Worl")),

    Example('existing negative index',
      Given(`"Hello World"[-12,-2]`),
      Evaluates_to("Hello Worl")),

    Example('existing index and negative count',
      Given(`"Hello World"[-666,-2]`),
      Evaluates_to("Hello Worl")),

    Example('existing  negative index and negative count',
      Given(`"Hello World"[-11, 2]`),
      Evaluates_to("He")),

    Example('index to the left of string and count positioning back into string',
      Given(`"Hello World"[-12, 2]`),
      Evaluates_to("H")),

    Example('existing index and negative count to same index',
      Given(`"Hello World"[-13, 2]`),
      Evaluates_to("")),

    Example('existing index and negative count to same index',
      Given(`"abcd"[2,-3]`),
      Evaluates_to("")),
  ),
)
