Examples('ToDataConverter',
  Examples('with rich_data == false',
    Example('converts SemVer to String with warning',
      Given(`to_data(SemVer('1.2.3'), message_prefix => 'x', rich_data => false)`),
      Evaluates_to('1.2.3'),
      Evaluates_with(Warning(Issue(EVAL_SERIALIZATION_UNKNOWN_CONVERTED_TO_STRING, 'klass' => 'SemVer', 'value' => '1.2.3')))),
  ),

  Examples('with rich_data == true',
    Example('converts SemVer to rich data hash',
      Given(`to_data(SemVer('1.2.3'), message_prefix => 'x', rich_data => true)`),
      Evaluates_to('__ptype' => 'SemVer', '__pvalue' => '1.2.3'),
      Evaluates_ok()),

    Example('converts SemVerRange to rich data hash',
      Given(`to_data(SemVerRange('>=1.2.3'), message_prefix => 'x', rich_data => true)`),
      Evaluates_to('__ptype' => 'SemVerRange', '__pvalue' => '>=1.2.3'),
      Evaluates_ok()),

    Example('converts Sensitive with SemVer to rich data hash',
      Given(`to_data(Sensitive(SemVer('1.2.3')), message_prefix => 'x', rich_data => true)`),
      Evaluates_to('__ptype' => 'Sensitive', '__pvalue' => { '__ptype' => 'SemVer', '__pvalue' => '1.2.3'}),
      Evaluates_ok()),
  ),
)

Examples('Converting JSON to rich data',
  Example('converts Error',
    Given(`from_data(json_to_data('{"__ptype":"SemVer","__pvalue":"1.2.3"}'))`),
    Evaluates_to(SemVer('1.2.3'))),
)

Examples('FromDataConverter',
  Example('converts SemVer hash to SemVer',
    Given(`from_data('__ptype' => 'SemVer', '__pvalue' => '1.2.3')`),
    Evaluates_to(SemVer('1.2.3'))),

  Example('converts SemVerRange hash to SemVerRange',
    Given(`from_data('__ptype' => 'SemVerRange', '__pvalue' => '>=1.2.3')`),
    Evaluates_to(SemVerRange('>=1.2.3'))),

  Example('converts Sensitive hash to Sensitive',
    Given(`from_data('__ptype' => 'Sensitive', '__pvalue' => 238) =~ Sensitive`),
    Evaluates_to(true)),
)

Examples('Passing values through json',
  [ Any,
    Array,
    Binary,
    Boolean,
    Callable,
#   Class,
    Collection,
    Default,
    Enum,
    Float,
    Hash,
    Init,
    Integer,
    Iterable,
    Iterator,
    NotUndef,
    Numeric,
    Object,
    Optional,
    Pattern,
    Regexp,
#   Resource,
    Runtime,
    Scalar,
    ScalarData,
    Sensitive,
    SemVer,
    SemVerRange,
    String,
    Struct,
    Timespan,
    Timestamp,
    Tuple,
    Type,
    TypeAlias,
    Undef,
    URI,
  ].map |$t| {[
    Example("type $t resolves to a type",
      Given("String($t) =~ /^TypeReference/"),
      Evaluates_to(false)),

    Example("can read/write the default for type $t",
      Given("from_data(json_to_data(data_to_json(to_data($t, 'rich_data' => true))))"),
      Evaluates_to($t)),

  ]}
)
