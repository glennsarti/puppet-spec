Examples('break',
  Examples('breaks iteration as if at end of input',
    Example('in a map for an array',
      Given(`[1,2,3].map |$x| { if $x == 3 { break() } $x }`),
      Evaluates_to([1,2])),
    Example('in a map for a hash',
      Given(`{'a' => 1, 'b' => 2, 'c' => 3}.map |$x, $y| { if $y == 3 { break() } $y }`),
      Evaluates_to([1,2])),
    Example('in a reduce for an array',
      Given(`[1,2,3,4].reduce |$memo, $x| { if $x == 4 { break() } $memo + $x }`),
      Evaluates_to(6)),
    Example('in a reduce for a hash',
      Given(Unindent(`
        {'a' => 1, 'b' => 2, 'c' => 3, 'd' => 4}.reduce |$memo, $x| {
          if $x[1] == 4 { break() }
          $string = "${memo[0]}${x[0]}"
          $number = $memo[1] + $x[1]
          [$string, $number]
        }`)),
      Evaluates_to(['abc', 6])),
    Example('an each for an array',
      Given(`[1,2,3].each |$x| { if $x == 3 { break() } notice($x) }`),
      Evaluates_with(Notice('1', '2'))),
    Example('an each for a map',
      Given(`{'a' => 1, 'b' => 2, 'c' => 3}.each |$x, $y| { if $y == 3 { break() } notice($y) }`),
      Evaluates_with(Notice('1', '2'))),
  ),

  Example('illegal break raises error',
    Given(`if 1 == 1 { break() }`),
    Evaluates_with(Error('/break\(\) from context where this is illegal at unknown'))),
)