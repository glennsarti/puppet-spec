Examples('Error type',
  Example('is an instance of its meta type',
    Given(@(SRC)),
      Error =~ Type[Error]
      |-SRC
    Evaluates_to(true)),

  Example('is equal to itself',
    Given(@(SRC)),
      Error == Error
      |-SRC
    Evaluates_to(true)),

  Example('is not less than itself',
    Given(@(SRC)),
      Error < Error
      |-SRC
    Evaluates_to(false)),

  Example('is not greater than itself',
    Given(@(SRC)),
      Error > Error
      |-SRC
    Evaluates_to(false)),

  Examples('when parameterized',
    Example('is equal other Error types with equal parameters',
      Given(@(SRC)),
        [
          Error['puppet/error'] == Error['puppet/error', default],
          Error['puppet/error', 'ouch'] == Error['puppet/error', 'ouch'],
          Error['puppet/error', 'ouch'] != Error['puppet/error', 'ouch!']
        ]
        |-SRC
      Evaluates_to([true, true, true])),

    Example('is assignable from more qualified types',
      Given(@(SRC)),
        [
          Error > Error['puppet/error'],
          Error['puppet/error'] > Error['puppet/error', 'ouch'],
          Error['puppet/error', default] > Error['puppet/error', 'ouch']
        ]
        |-SRC
      Evaluates_to([true, true, true])),

    Example('is not assignable unless kind is assignable',
      Given(@(SRC)),
        [
          Error[/a/] > Error['hah'],
          Error[/a/] > Error['hbh'],
          Error[Enum[a,b,c]] > Error[a],
          Error[Enum[a,b,c]] > Error[d],
          Error[Pattern[/a/, /b/]] > Error[a],
          Error[Pattern[/a/, /b/]] > Error[c],
          Error[Pattern[/a/, /b/]] > Error[Enum[a, b]],
        ]
        |-SRC
      Evaluates_to([true, false, true, false, true, false, true])),

    Example('presents parsable string form',
      Given(@(SRC)),
        [
          String(Error['a']),
          String(Error[/a/]),
          String(Error[Enum['a', 'b']]),
          String(Error[Pattern[/a/, /b/]]),
          String(Error['a', default]),
          String(Error[/a/, default]),
          String(Error[Enum['a', 'b'], default]),
          String(Error[Pattern[/a/, /b/], default]),
          String(Error[default,'a']),
          String(Error[default,/a/]),
          String(Error[default,Enum['a', 'b']]),
          String(Error[default,Pattern[/a/, /b/]]),
          String(Error['a','a']),
          String(Error[/a/,/a/]),
          String(Error[Enum['a', 'b'],Enum['a', 'b']]),
          String(Error[Pattern[/a/, /b/],Pattern[/a/, /b/]]),
        ]
        |-SRC
      Evaluates_to([
        `Error['a']`,
        `Error[/a/]`,
        `Error[Enum['a', 'b']]`,
        `Error[Pattern[/a/, /b/]]`,
        `Error['a']`,
        `Error[/a/]`,
        `Error[Enum['a', 'b']]`,
        `Error[Pattern[/a/, /b/]]`,
        `Error[default, 'a']`,
        `Error[default, /a/]`,
        `Error[default, Enum['a', 'b']]`,
        `Error[default, Pattern[/a/, /b/]]`,
        `Error['a', 'a']`,
        `Error[/a/, /a/]`,
        `Error[Enum['a', 'b'], Enum['a', 'b']]`,
        `Error[Pattern[/a/, /b/], Pattern[/a/, /b/]]`,
      ])),
  ),

  Examples('instance',
    Example('can be created using positional arguments',
      Given(@(SRC)),
        $o = Error('bad things happened', 'puppet/error', 'OOPS')
        [String($o), String(type($o))]
        |-SRC
      Evaluates_to([
        `Error('message' => 'bad things happened', 'kind' => 'puppet/error', 'issue_code' => 'OOPS')`,
        `Error['puppet/error', 'OOPS']`
      ])),

    Example('can be created using named arguments',
      Given(@(SRC)),
        $o = Error(message => 'Sorry, not implemented', kind => 'puppet/error', issue_code => 'NOT_IMPLEMENTED')
        [String($o), String(type($o))]
        |-SRC
      Evaluates_to([
        `Error('message' => 'Sorry, not implemented', 'kind' => 'puppet/error', 'issue_code' => 'NOT_IMPLEMENTED')`,
        `Error['puppet/error', 'NOT_IMPLEMENTED']`
      ])),

    Example('is an instance of its inferred type',
      Given(@(SRC)),
        $o = Error('bad things happened', 'puppet/error')
        $o =~ type($o)
        |-SRC
      Evaluates_to(true)),

    Example('is an instance of Error with matching kind',
      Given(@(SRC)),
        Error('bad things happened', 'puppet/error') =~ Error[/puppet\/error/]
        |-SRC
      Evaluates_to(true)),

    Example('is an instance of Error with matching issue_code',
      Given(@(SRC)),
        Error('bad things happened', 'puppet/error', 'FEE') =~ Error[default, 'FEE']
        |-SRC
      Evaluates_to(true)),

    Example('is an instance of Error with matching kind and issue_code',
      Given(@(SRC)),
        Error('bad things happened', 'puppet/error', 'FEE') =~ Error['puppet/error', 'FEE']
        |-SRC
      Evaluates_to(true)),

    Example('is not an instance of Error unless kind matches',
      Given(@(SRC)),
        Error('bad things happened', 'puppetlabs/error') =~ Error[/puppet\/error/]
        |-SRC
      Evaluates_to(false)),

    Example('is not an instance of Error unless issue_code matches',
      Given(@(SRC)),
        Error('bad things happened', 'puppetlabs/error', 'BAR') =~ Error[default, 'FOO']
        |-SRC
      Evaluates_to(false)),

    Example('is not an instance of Error unless both kind and issue is a match',
      Given(@(SRC)),
        $e = Error('bad things happened', 'puppet/error', 'FEE')
        [$e =~ Error['puppetlabs/error', 'FEE'], $e =~ Error['puppet/error', 'FUM']]
        |-SRC
      Evaluates_to([false, false])),
  ),
)