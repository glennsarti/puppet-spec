Examples('the Object type',
  Examples('can be declared',
    Example('using keyword Object and bracketed parameter list with hash',
      Given(@(SRC)),
        type MyType = Object[{
          attributes => {
            p1 => String
          }
        }]
        notice(MyType)
        |-SRC
      Evaluates_with(Notice('MyType'))),

    Example('using keyword Object and hash',
      Given(@(SRC)),
        type MyType = Object{
          attributes => {
            p1 => String
          }
        }
        notice(MyType)
        |-SRC
      Evaluates_with(Notice('MyType'))),

    Example('just a hash',
      Given(@(SRC)),
        type MyType = {
          attributes => {
            p1 => String
          }
        }
        notice(MyType)
        |-SRC
      Evaluates_with(Notice('MyType'))),

    Example('just a one element array with a hash',
      Given(@(SRC)),
        type MyType = [{
          attributes => {
            p1 => String
          }
        }]
        notice(MyType)
        |-SRC
      Evaluates_with(Notice('MyType'))),
  ),

  Examples('when creating instance',
    Examples('using positional arguments',
      Example('all required',
        Given(@(SRC)),
          type MyType = {
            attributes => {
              p1 => String,
              p2 => Integer
            }
          }
          notice(MyType('hello', 23))
          |-SRC
        Evaluates_with(Notice(`MyType('p1' => 'hello', 'p2' => 23)`))),
    ),
  ),

  Examples('with attributes',
    Example('stores value in attribute',
      Given(@(SRC)),
        type MyType = {
          attributes => { a => { type => Integer, value => 3 } }
        }
        MyType().a
        |-SRC
       Evaluates_to(3)),

    Examples('raises an error when',
      Example('attribute type is not a type',
        Given(@(SRC)),
          type MyType = {
            attributes => { a => 23 }
          }
          notice(MyType)
          |-SRC
         Evaluates_with(Issue(EVAL_TYPE_MISMATCH, detail => Contain('attribute MyType[a] expects a Type value, got Integer')))),

      Example('attribute type is missing',
        Given(@(SRC)),
          type MyType = {
            attributes => { a => { kind => derived } }
          }
          notice(MyType)
          |-SRC
         Evaluates_with(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`attribute MyType[a] expects a value for key 'type'`)))),

      Example('value is of incompatible type',
        Given(@(SRC)),
          type MyType = {
            attributes => { a=> { type => Integer, value => 'three' } }
          }
          notice(MyType)
          |-SRC
         Evaluates_with(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`attribute MyType[a] expects an Integer value, got String`)))),

      Example('kind is invalid',
        Given(@(SRC)),
          type MyType = {
            attributes => { a=> { type => String, kind => derivd } }
          }
          notice(MyType)
          |-SRC
         Evaluates_with(Issue(EVAL_TYPE_MISMATCH, detail => Contain(
             `entry 'kind' expects a match for Enum['constant', 'derived', 'given_or_derived', 'reference'], got 'derivd'`)))),

      Example('kind is constant and no value is declared',
        Given(@(SRC)),
          type MyType = {
            attributes => { a=> { type => String, kind => constant } }
          }
          notice(MyType)
          |-SRC
         Evaluates_with(EVAL_CONSTANT_REQUIRES_VALUE)),

      Example('kind is constant and final is false',
        Given(@(SRC)),
          type MyType = {
            attributes => { a=> { type => Integer, kind => constant, final => false } }
          }
          notice(MyType)
          |-SRC
         Evaluates_with(EVAL_CONSTANT_WITH_FINAL)),

      Example('attribute and function has the same name',
        Given(@(SRC)),
          type MyType = {
            attributes => { a => Integer },
            functions => { a => Callable[Integer] }
          }
          notice(MyType)
          |-SRC
         Evaluates_with(EVAL_MEMBER_NAME_CONFLICT)),
    ),
  ),

  Examples('with type parameters',
    Example('can be declared',
    Given(@(SRC)),
      type MyType = {
        type_parameters => {
          p1 => String
        }
      }
      notice(MyType)
      |-SRC
    Evaluates_with(Notice('MyType'))),

    Example('can be referenced',
    Given(@(SRC)),
      type MyType = {
        type_parameters => {
          p1 => String
        }
      }
      notice(MyType['hello'])
      |-SRC
    Evaluates_with(Notice(`MyType['hello']`))),

    Example('leading unset parameters are represented as default in string representation',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => String, p2 => String }
      }
      notice(MyType[default, 'hello'])
      |-SRC
    Evaluates_with(Notice(`MyType[default, 'hello']`))),

    Example('trailing unset parameters are skipped in string representation',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => String, p2 => String }
      }
      notice(MyType['hello'])
      |-SRC
    Evaluates_with(Notice(`MyType['hello']`))),

    Example('a type with more than 2 type parameters uses named arguments in string representation',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => String, p2 => String, p3 => String }
      }
      notice(MyType['hello'])
      |-SRC
    Evaluates_with(Notice(`MyType[{'p1' => 'hello'}]`))),

    Example('can be used without parameters',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => String }
      }
      notice(MyType)
      |-SRC
    Evaluates_with(Notice(`MyType`))),

    Example('involves type parameter values when testing instance of',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => String },
        attributes => { p1 => String }
      }
      $i = MyType('world')
      [MyType, MyType['hello'], MyType['world']].map |$t| { $i =~ $t }
      |-SRC
    Evaluates_to([true, false, true])),

    Example('involves type parameter values when testing assignability',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => String }, attributes => { p1 => String }
      }
      $t1 = MyType['world']
      [MyType, MyType['hello'], MyType['world']].map |$t2| { $t2 >= $t1 }
      |-SRC
    Evaluates_to([true, false, true])),

    Example('parameters can be types',
    Given(@(SRC)),
      type MyType = {
        type_parameters => {
          p1 => Variant[String,Regexp,Type[Enum],Type[Pattern],Type[NotUndef]],
          p2 => Variant[String,Regexp,Type[Enum],Type[Pattern],Type[NotUndef]]
        },
        attributes => {
          p1 => String,
          p2 => String
        }
      }
      $i = MyType('good bye', 'cruel world')
      [
        MyType,
        MyType[Enum['hello', 'good bye']],
        MyType[Enum['hello', 'good bye'], Pattern[/world/, /universe/]],
        MyType[NotUndef, NotUndef],
        MyType[Enum['hello', 'yo']]
      ].map |$t| { $i =~ $t }
      |-SRC
    Evaluates_to([true, true, true, true, false])),

    Example('parameters can be provided using named arguments',
    Given(@(SRC)),
      type MyType = {
        type_parameters => {
          p1 => Variant[String,Regexp,Type[Enum],Type[Pattern],Type[NotUndef]],
          p2 => Variant[String,Regexp,Type[Enum],Type[Pattern],Type[NotUndef]]
        },
        attributes => {
          p1 => String,
          p2 => String
        }
      }
      $i = MyType('good bye', 'cruel world')
      [
        MyType[p1 => 'hello', p2 => 'cruel world'],
        MyType[p1 => 'good bye', p2 => 'cruel world']
      ].map |$t| { $i =~ $t }
      |-SRC
    Evaluates_to([false, true])),

    Example('undef is a valid value for a type parameter',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => Optional[String] },
        attributes => { p1 => Optional[String] }
      }
      [
        MyType[undef] == MyType[undef],
        MyType() =~ MyType[undef],
        MyType('hello') =~ MyType[undef],
      ]
      |-SRC
    Evaluates_to([true, true, false])),

    Example('is assignable to another parameterized type if base type and parameters are assignable',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => Variant[Undef,String,Regexp,Type[Enum],Type[Pattern]] },
        attributes => { p1 => String }
      }
      MyType[Pattern[/a/,/b/]] >= MyType[Enum['a','b']]
      |-SRC
    Evaluates_to(true)),

    Example('Instance is inferred to parameterized type',
    Given(@(SRC)),
      type MyType = {
        type_parameters => { p1 => Variant[Undef,String,Regexp,Type[Enum],Type[Pattern]] },
        attributes => { p1 => String }
      }
      $i = MyType('hello')
      type($i) == MyType['hello']
      |-SRC
    Evaluates_to(true)),

    Examples('raises an error when',
      Example('type parameters type is not a type',
        Given(@(SRC)),
          type MyType = Object[{
            type_parameters => { a => 23 }
          }]
          notice(MyType)
          |-SRC
         Evaluates_with(Issue(EVAL_TYPE_MISMATCH, detail => Contain('type_parameter MyType[a] expects a Type value, got Integer')))),

      Example('the type parameter value is present',
        Given(@(SRC)),
          type MyType = Object[{
            type_parameters => { a => { type => Integer, value => 0 }}
          }]
          notice(MyType)
          |-SRC
        Evaluates_with(Issue(EVAL_TYPE_MISMATCH, detail => Contain(`unrecognized key 'value'`)))),

      Example('no parameter is given',
        Given(@(SRC)),
          type MyType = Object[{
            type_parameters => { p1 => Variant[String,Regexp,Type[Enum],Type[Pattern]] },
            attributes => { p1 => String }
          }]
          notice(MyType[default])
          |-SRC
        Evaluates_with(EVAL_EMPTY_TYPE_PARAMETER_LIST)),
    ),
  ),
)
