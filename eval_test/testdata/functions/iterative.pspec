['all', 'any', 'each', 'filter', 'map'].map |$func| {
  Examples("the ${func} function",
    Given(Scope(func => $func)),

    Example('passes a hash entry as an array of the key and value',
      Given(`$func.call({a=>1}) |$v| { notice($v[0], $v[1]) }`),
      Evaluates_with(Notice('a', '1'))),

    Examples('raises an error when',
      Example('used against an unsupported type',
        Given(`$func.call(3.14)  |$k, $v| {  }`),
        Evaluates_with(Error(/expects an Iterable value, got Float/))),

      Example('called with any parameters besides a block',
        Given(`$func.call([1], 1, 2)  |$k, $v| {  }`),
        Evaluates_with(Error(/expects (?:between 1 and 2 arguments|1 argument), got 3/))),

      Example('called without a block',
        Given(`$func.call([1])`),
        Evaluates_with(Error(/expects a block/))),

      Example('called with something that is not a block',
        Given(`$func.call([1], 1, 2)`),
        Evaluates_with(Error(/expects (?:between 1 and 2 arguments|1 argument), got 3/))),

      Example('called with a block with too many required parameters',
        Given(`$func.call([1]) |$v1, $v2, $v3| {  }`),
        Evaluates_with(Error(/block expects(?: between 1 and)? 2 arguments, got 3/))),

      Example('raises an error when called with a block with too few parameters',
        Given(`$func.call([1]) || {  }`),
        Evaluates_with(Error(/block expects(?: between 1 and)? 2 arguments, got none/))),
    ),

    Example('does not raise an error when called with a block with too many but optional arguments',
      Given(`$func.call([1]) |$v1, $v2, $v3=extra| {  }`),
      Evaluates_ok()),
  )
}