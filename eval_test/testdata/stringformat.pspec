Examples('Array',
  Examples('the format',
    {
      `"%s"`  => "[1, 'hello']",
      `"%p"`  => "[1, 'hello']",
      `"%a"`  => "[1, 'hello']",
      `"%<a"` => "<1, 'hello'>",
      `"%[a"` => "[1, 'hello']",
      `"%(a"` => "(1, 'hello')",
      `"%{a"` => "{1, 'hello'}",
      `"% a"` => "1, 'hello'",
      `{Array => { format => "%(a", separator => "" }}` => "(1 'hello')",
      `{Array => { format => "%|a", separator => "" }}` => "|1 'hello'|",
      `{Array => { format => "%(a", separator => "", string_formats => { Integer => "%#x" }}}` => "(0x1 'hello')"
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String([1, 'hello'], ${fmt})"),
        Evaluates_to($result))
    }
  ),

  Examples('multiple rules selects most specific',
    {
      `[1, 2]` => `(1, 2)`,
      `[1, 2, 3]` => `{1, 2, 3}`,
      `[1, 2, 3, 4, 5]` => `[1, 2, 3, 4, 5]`
    }.map |$array, $result| {
      Example($result,
        Given("String(${array}, Array[Integer, 1, 2] => '%(a', Array[Integer, 3, 4] => '%{a')"),
        Evaluates_to($result))
    }
  ),

  Examples('alternate mode',
    Example('indents elements',
      Given(`String([1, 2, 9, 9, [3, 4], [5, [6, 7]], 8, 9], Array => { format => '%#a', separator => ',' })`),
      Evaluates_to(Unindent(`
        [1, 2, 9, 9,
          [3, 4],
          [5,
            [6, 7]],
          8, 9]`))),

    Example('treats hashes as nested arrays wrt indentation',
      Given(`String([1, 2, 9, 9, 3 => 4, 5 => 6, [5, [6, 7]], 8, 9], Array => { format => '%#a', separator => ',' })`),
      Evaluates_to(Unindent(`
        [1, 2, 9, 9,
          {3 => 4, 5 => 6},
          [5,
            [6, 7]],
          8, 9]`))),

    Example('indents and breaks when a sequence > given width',
      Given(`String([1, 2, 90, [3, 4], [5, [6, 7]], 8, 9], Array => { format => '%#3a', separator => ',' })`),
      Evaluates_to(Unindent(`
        [ 1,
          2,
          90,
          [3, 4],
          [5,
            [6, 7]],
          8,
          9]`))),

    Example('indents and breaks when a sequence (placed last) > given width',
      Given(`String([1, 2, 9, [3, 4], [5, [6, 7]], 8, 900], Array => { format => '%#3a', separator => ',' })`),
      Evaluates_to(Unindent(`
        [ 1,
          2,
          9,
          [3, 4],
          [5,
            [6, 7]],
          8,
          900]`))),

    Example('indents and breaks nested sequences when one is placed first',
      Given(`String([[[1, 2, [3, 4]]], [5, [6, 7]], 8, 900], Array => { format => '%#a', separator => ',' })`),
      Evaluates_to(Unindent(`
        [
          [
            [1, 2,
              [3, 4]]],
          [5,
            [6, 7]],
          8, 900]`))),
  ),
  Example('errors when format is not recognized',
    Given(`String([1,2],'%k')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `Illegal format 'k' specified for value of Array type - expected one of the characters 'asp'`))),
)

Examples('Binary',
  Examples('with sample',
    Given(Scope(sample => Binary('binary', '%r'))),
    Example('is converted to strict base64 string unquoted by default (same as %B)',
      Given(`String($sample)`), Evaluates_to('YmluYXJ5')),

    Example('is converted using %p by default when contained in an array',
      Given(`String([$sample])`), Evaluates_to("[Binary('YmluYXJ5')]")),

    {
            `%s` => `binary`,
            `%#s` => `'binary'`,
            `%8s` => `  binary`,
            `%.2s` => `bi`,
            `%-8s` => `binary  `,
            `%p` => `Binary('YmluYXJ5')`,
            `%b` => "YmluYXJ5\n",
            `%11b` => "  YmluYXJ5\n",
            `%-11b` => "YmluYXJ5\n  ",
            `%.2b` => `Ym`,
            `%B` => `YmluYXJ5`,
            `%11B` => `   YmluYXJ5`,
            `%-11B` => `YmluYXJ5   `,
            `%.2B` => `Ym`,
            `%u` => `YmluYXJ5`,
            `%11u` => `   YmluYXJ5`,
            `%-11u` => `YmluYXJ5   `,
            `%.2u` => `Ym`,
            `%t` => `Binary`,
            `%#t` => `'Binary'`,
            `%8t` => `  Binary`,
            `%-8t` => `Binary  `,
            `%.3t` => `Bin`,
            `%T` => `BINARY`,
            `%#T` => `'BINARY'`,
            `%8T` => `  BINARY`,
            `%-8T` => `BINARY  `,
            `%.3T` => `BIN`,
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String(\$sample, Binary => '$fmt')"), Evaluates_to($result))
    }
  ),

  Example('%u formats in base64 urlsafe mode',
    Given(`String(Binary('++//'), '%u')`), Evaluates_to(`--__`)),

  Example('refuses to do %s on strings containing illegal unicode constructs',
    Given(`String(Binary('apa=', '%b'), '%s')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `binary data is not valid UTF-8`))),

  Example('%s formats as unquoted string with valid UTF-8 chars',
    Given(`String(Binary([0xee, 0x8c, 0x98]), '%s')`), Evaluates_to("\uE318")),

  Example('errors when format is not recognized',
    Given(`String(Binary([1]),'%k')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `Illegal format 'k' specified for value of Binary type - expected one of the characters 'bButTsp'`))),
)

Examples('Boolean',
  Examples('false',
    {
      `%t` => `false`,
      `%#t` => `f`,
      `%T` => `False`,
      `%#T` => `F`,
      `%s` => `false`,
      `%p` => `false`,
      `%d` => `0`,
      `%x` => `0`,
      `%#x` => `0x0`,
      `%o` => `0`,
      `%#o` => `0`,
      `%b` => `0`,
      `%#b` => `0`,
      `%#B` => `0`,
      `%e` => `0.000000e+00`,
      `%E` => `0.000000E+00`,
      `%f` => `0.000000`,
      `%.5g` => `0.0000`,
      `%.1f` => `0.0`,
      `%y` => `no`,
      `%Y` => `No`,
      `%#y` => `n`,
      `%#Y` => `N`,
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String(false, Boolean => '$fmt')"), Evaluates_to($result))
    }
  ),

  Examples('true',
    {
      `%t` => `true`,
      `%#t` => `t`,
      `%T` => `True`,
      `%#T` => `T`,
      `%s` => `true`,
      `%#s` => `'true'`,
      `%p` => `true`,
      `%#p` => `'true'`,
      `%d` => `1`,
      `%x` => `1`,
      `%#x` => `0x1`,
      `%o` => `1`,
      `%#o` => `01`,
      `%b` => `1`,
      `%#b` => `0b1`,
      `%#B` => `0B1`,
      `%e` => `1.000000e+00`,
      `%f` => `1.000000`,
      `%.5g` => `1.0000`,
      `%.1f` => `1.0`,
      `%y` => `yes`,
      `%Y` => `Yes`,
      `%#y` => `y`,
      `%#Y` => `Y`,
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String(true, Boolean => '$fmt')"), Evaluates_to($result))
    }
  ),

  Example('errors when format is not recognized',
    Given(`String(true,'%k')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `Illegal format 'k' specified for value of Boolean type - expected one of the characters 'tTyYdxXobBeEfgGaAsp'`))),
)

Examples('Default',
  Examples('false',
    {
      `%d` => `default`,
      `%D` => `Default`,
      `%#d` => `'default'`,
      `%#D` => `'Default'`,
      `%s` => `default`,
      `%p` => `default`,
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String(default, Default => '$fmt')"), Evaluates_to($result))
    }
  ),
)

Examples('Float',
  {
    `%s` => `18.0`,
    `%#s` => `'18.0'`,
    `%5s` => ` 18.0`,
    `%#8s` => `  '18.0'`,
    `%05.1s` => `    1`,
    `%p` => `18.0000`,
    `%7.2p` => `     18`,

    `%e` => `1.800000e+01`,
    `%+e` => `+1.800000e+01`,
    `% e` => ` 1.800000e+01`,
    `%.2e` => `1.80e+01`,
    `%10.2e` => `  1.80e+01`,
    `%-10.2e` => `1.80e+01  `,
    `%010.2e` => `001.80e+01`,

    `%E` => `1.800000E+01`,
    `%+E` => `+1.800000E+01`,
    `% E` => ` 1.800000E+01`,
    `%.2E` => `1.80E+01`,
    `%10.2E` => `  1.80E+01`,
    `%-10.2E` => `1.80E+01  `,
    `%010.2E` => `001.80E+01`,

    `%f` => `18.000000`,
    `%+f` => `+18.000000`,
    `% f` => ` 18.000000`,
    `%.2f` => `18.00`,
    `%10.2f` => `     18.00`,
    `%-10.2f` => `18.00     `,
    `%010.2f` => `0000018.00`,

    `%g` => `18.0000`,
    `%10g` => `   18.0000`,
    `%010g` => `00018.0000`,
    `%-10g` => `18.0000   `,
    `%10.4g` => `     18.00`,

    `%d` => `18`,
    `%x` => `12`,
    `%X` => `12`,
    `%o` => `22`,
    `%b` => `10010`,
    `%#B` => `0B10010`,
  }.map |$fmt, $result| {
    Example("$fmt produces $result",
      Given("String(18.0, Float => '$fmt')"), Evaluates_to($result))
  },

  Example('errors when format is not recognized',
    Given(`String(18.0,'%k')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `Illegal format 'k' specified for value of Float type - expected one of the characters 'dxXobBeEfgGaAsp'`))),
)

Examples('Hash',
  Examples(`{ 1 => 'world' }`,
  {
    `'%s'` => `{1 => 'world'}`,
    `'%p'` => `{1 => 'world'}`,
    `'%h'` => `{1 => 'world'}`,
    `'%a'` => `[[1, 'world']]`,
    `'%<h'` => `<1 => 'world'>`,
    `'%[h'` => `[1 => 'world']`,
    `'%(h'` => `(1 => 'world')`,
    `'%{h'` => `{1 => 'world'}`,
    `'% h'` => `1 => 'world'`,
    `{ format => '%(h', separator2 => ' ' }` => `(1 'world')`,
    `{ format => '%(h', separator2 => ' ', string_formats => { Integer => '%#x' }}` => `(0x1 'world')`,
  }.map |$fmt, $result| {
    Example("$fmt produces $result",
      Given("String({1 => 'world'}, {Hash => $fmt})"), Evaluates_to($result))
  }),

  Examples(`{1 => 'hello', 2 => 'world'}`,
  {
    `'%s'` => `{1 => 'hello', 2 => 'world'}`,
    `{ format => '%(h', separator2 => ' ' }` => `(1 'hello', 2 'world')`,
    `{ format => '%(h', separator => ' >>', separator2 => ' <=> ', string_formats => { Integer => '%#x' }}` => `(0x1 <=> 'hello' >> 0x2 <=> 'world')`,
  }.map |$fmt, $result| {
    Example("$fmt produces $result",
      Given("String({1 => 'hello', 2 => 'world'}, {Hash => $fmt})"), Evaluates_to($result))
  }),

  Example(`indents elements in alternative mode #`,
    Given(`String({ 1 => 'hello', 2 => { 3 => 'world' }}, { Hash => { format => '%#h', separator => ',' }})`),
    Evaluates_to(Unindent(`
      {
        1 => 'hello',
        2 => {
          3 => 'world'
        }
      }`))),

  Examples(`containing an Array`,
    Example(`the hash and array renders without breaks and indentation by default`,
      Given(`String({ 1 => [1, 2, 3] })`), Evaluates_to('{1 => [1, 2, 3]}')
    ),

    Example(`the array renders with breaks if so specified`,
      Given(`String({ 1 => [1, 2, 3] }, { Array => { format => '%#1a' }})`),
      Evaluates_to(Unindent(`
        {1 => [ 1,
            2,
            3]}`))
    ),

    Example(`both hash and array renders with breaks and indentation if so specified for both`,
      Given(`String({ 1 => [1, 2, 3] }, { Hash => { format => '%#h' }, Array => { format => '%#1a' }})`),
      Evaluates_to(Unindent(`
        {
          1 => [ 1,
            2,
            3]
        }`))
    ),

    Example(`hash, but not array is rendered with breaks and indentation if so specified only for the hash`,
      Given(`String({ 1 => [1, 2, 3] }, { Hash => { format => '%#h' }, Array => { format => '%a' }})`),
      Evaluates_to(Unindent(`
        {
          1 => [1, 2, 3]
        }`))
    ),
  ),

  Example('errors when format is not recognized',
    Given(`String({ 1 => 2 },'%k')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `Illegal format 'k' specified for value of Hash type - expected one of the characters 'hasp'`))),
)

Examples('Integer',
  {
    `%s` => `18`,
    `%4.1s` => `   1`,
    `%p` => `18`,
    `%4.2p` => `  18`,
    `%4.1p` => `   1`,
    `%#s` => `'18'`,
    `%#6.4s` => `  '18'`,
    `%#p` => `18`,
    `%#6.4p` => `    18`,
    `%d` => `18`,
    `%4.1d` => `  18`,
    `%4.3d` => ` 018`,
    `%x` => `12`,
    `%4.3x` => ` 012`,
    `%#x` => `0x12`,
    `%#6.4x` => `0x0012`,
    `%X` => `12`,
    `%4.3X` => ` 012`,
    `%#X` => `0X12`,
    `%#6.4X` => `0X0012`,
    `%o` => `22`,
    `%4.2o` => `  22`,
    `%#o` => `022`,
    `%#6.4o` => `  0022`,
    `%b` => `10010`,
    `%7.6b` => ` 010010`,
    `%#b` => `0b10010`,
    `%#9.6b` => ` 0b010010`,
    `%#B` => `0B10010`,
    `%#9.6B` => ` 0B010010`,
    # Integer to float then a float format - fully tested for float
    `%e` => `1.800000e+01`,
    `%E` => `1.800000E+01`,
    `%f` => `18.000000`,
    `%.5g` => `18.000`,
    `%.1f` => `18.0`,
  }.map |$fmt, $result| {
    Example("$fmt produces $result",
      Given("String(18, Integer => '$fmt')"), Evaluates_to($result))
  },

  Example('produces a unicode char string by using format %c',
    Given(`String(0x1f603, '%c')`), Evaluates_to("\u{1f603}")),

  Example('produces a quoted unicode char string by using format %#c',
    Given(`String(0x1f603, '%#c')`), Evaluates_to("'\u{1f603}'")),

  Example('errors when format is not recognized',
    Given(`String(18,'%k')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `Illegal format 'k' specified for value of Integer type - expected one of the characters 'dxXobBeEfgGaAspc'`))),
)

Examples('String',
  Example("value of 'hello world' is 'hello world'",
    Given(`String('hello world')`), Evaluates_to('hello world')),

  Examples('%p produces',
    Given(Scope(format => { String => '%p' })),

    Example('double quoted result for string that contains control characters',
      Given(`String("hello\tworld.\r\nSun is brigth today.", $format)`), Evaluates_to(`"hello\tworld.\r\nSun is brigth today."`)),

    Example('single quoted result for string without \or control characters',
      Given(`String("hello world", $format)`), Evaluates_to(`'hello world'`)),

    Example('quoted 2-byte unicode chars',
      Given(`String("esc \u001b.", $format)`), Evaluates_to(`"esc \u{1B}."`)),

    Example('escape for $ in double quoted string',
      Given(`String("escape the \$ sign\n", $format)`), Evaluates_to(`"escape the \$ sign\n"`)),

    Example('no escape for $ in single quoted string',
      Given(`String('don\'t escape the $ sign', $format)`), Evaluates_to(`'don\'t escape the $ sign'`)),

    Example('escape for double quote but not for single quote in double quoted string',
      Given(`String("the ' single and \" double quote\n", $format)`), Evaluates_to(`"the ' single and \" double quote\n"`)),

    Example('escape for single quote but not for double quote in single quoted string',
      Given(`String("the ' single and \" double quote", $format)`), Evaluates_to(`'the \' single and " double quote'`)),

    Example(`escape for last \`,
      Given(`String("escape the last \\", $format)`), Evaluates_to(`'escape the last \'`)),
  ),

  Examples('hello::world',
    {
      `%s` => `hello::world`,
      `%p` => `'hello::world'`,
      `%c` => `Hello::world`,
      `%#c` => `'Hello::world'`,
      `%C` => `Hello::World`,
      `%#C` => `'Hello::World'`,
      `%u` => `HELLO::WORLD`,
      `%#u` => `'HELLO::WORLD'`,
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String('hello::world', String => '$fmt')"), Evaluates_to($result))
    }
  ),

  Examples('HELLO::WORLD',
    {
      `%c` => `Hello::world`,
      `%#c` => `'Hello::world'`,
      `%C` => `Hello::World`,
      `%#C` => `'Hello::World'`,
      `%d` => 'hello::world',
      `%#d` => `'hello::world'`,
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String('HELLO::WORLD', String => '$fmt')"), Evaluates_to($result))
    }
  ),

  Examples('%t',
    {
      `   a b  ` => `a b`,
      `a b  ` => `a b`,
      `   a b` => `a b`
    }.map |$input, $result| {
      Example("'$input' is trimmed to '$result'",
        Given("String('$input', '%t')"), Evaluates_to($result))
    }),

  Examples('%#t',
    {
      `   a b  ` => `'a b'`,
      `a b  ` => `'a b'`,
      `   a b` => `'a b'`
    }.map |$input, $result| {
      Example("'$input' is trimmed to '$result'",
        Given("String('$input', '%#t')"), Evaluates_to($result))
    }),

  Example(`width pads a string left with spaces to given width`,
    Given(`String('abcd', '%6s')`), Evaluates_to(`  abcd`)),

  Example(`width pads a string right with spaces to given width and - flag`,
    Given(`String('abcd', '%-6s')`), Evaluates_to(`abcd  `)),

  Example(`precision truncates the string if precision < length`,
    Given(`String('abcd', '%-6.2s')`), Evaluates_to(`ab    `)),

  Examples('width and precision can be combined',
    {
      `%4.2s` => `  he`,
      `%4.2p` => `  'h`,
      `%4.2c` => `  He`,
      `%#4.2c` => `  'H`,
      `%4.2u` => `  HE`,
      `%#4.2u` => `  'H`,
      `%4.2d` => `  he`,
      `%#4.2d` => `  'h`
		}.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String('hello::world', String => '$fmt')"), Evaluates_to($result))
    }
  ),

  Example('errors when format is not recognized',
    Given(`String('wat', '%k')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `Illegal format 'k' specified for value of String type - expected one of the characters 'cCudspt'`))),
)

Examples('Type',
  Examples('Array',
    [
      `Array`,
      `Array[0, 0]`,
      `Array[String]`,
      `Array[String, 10, 20]`,
      `Array[String, 5, default]`
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Callable',
    [
      `Callable`,
      `Callable[0, 0]`,
      `Callable[1, 1]`,
      `Callable[1, 2]`,
      `Callable[0, default]`,
      `Callable[1, default]`,
      `Callable[[0, 0], Float]`,
      `Callable[String, Integer]`,
      `Callable[[String, Integer], Float]`,
      `Callable[String, 0, default]`,
      `Callable[String, 0, 3]`,
      `Callable[0, 0, Callable]`,
      `Callable[String, Callable]`,
      `Callable[String, 1, 1, Callable]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Collection',
    [
      `Collection`,
      `Collection[0, 0]`,
      `Collection[1, 1]`,
      `Collection[10, 20]`,
      `Collection[5, default]`,
      `Collection[0, 5]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Enum',
    [
      `Enum`,
      `Enum['a']`,
      `Enum['a', 'b']`,
      `Enum['A', 'B']`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Float',
    {
      `%s` => `Float`,
      `%p` => `Float`,
      `%#s` => `'Float'`,
      `%#p` => `Float`
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String(Float, Type => '$fmt')"), Evaluates_to($result))
    },

    [
      `Float`,
      `Float[1.00000]`,
      `Float[default, 2.00000]`,
      `Float[1.00000, 2.00000]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Hash',
    [
      `Hash`,
      `Hash[0, 0]`,
      `Hash[String, Integer]`,
      `Hash[String, Integer, 4, 9]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Integer',
    {
      `%s` => `Integer`,
      `%p` => `Integer`,
      `%#s` => `'Integer'`,
      `%#p` => `Integer`
    }.map |$fmt, $result| {
      Example("$fmt produces $result",
        Given("String(Integer, Type => '$fmt')"), Evaluates_to($result))
    },

    Example('Integer[1]', Given(`String(Integer[1])`), Evaluates_to(`Integer[1]`)),

    Example('Integer[1,1]', Given(`String(Integer[1,1])`), Evaluates_to(`Integer[1, 1]`)),

    Example('Integer[1,2]', Given(`String(Integer[1,2])`), Evaluates_to(`Integer[1, 2]`)),

    Example('Integer[default,2]', Given(`String(Integer[default,2])`), Evaluates_to(`Integer[default, 2]`)),
  ),

  Examples('Iterable',
    [
      `Iterable`,
      `Iterable[Integer]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Iterator',
    [
      `Iterator`,
      `Iterator[Integer]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('NotUndef',
    [
      `NotUndef`,
      `NotUndef[Data]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Optional',
    [
      `Optional`,
      `Optional[Integer]`,
      `Optional[String[1]]`,
      `Optional['string value']`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Pattern',
    [
      `Pattern`,
      `Pattern[/a.*/]`,
      `Pattern[/a.*/, /b.*/]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Runtime',
    [
      `Runtime`,
      `Runtime['go']`,
      `Runtime['java', 'java.lang.String']`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Struct',
    [
      `Struct`,
      `Struct[{'a' => String}]`,
      `Struct[{Optional['a'] => String}]`,
      `Struct[{'a' => Optional[String]}]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Examples('Tuple',
    [
      `Tuple`,
      `Tuple[0, 0]`,
      `Tuple[1, 1]`,
      `Tuple[1, 2]`,
      `Tuple[1, default]`,
      `Tuple[Float]`,
      `Tuple[String, Integer]`,
      `Tuple[String, 0, default]`,
      `Tuple[String, 2, default]`,
      `Tuple[String, 0, 3]`,
      `Tuple[String, 1, 1]`,
      `Tuple[String, Callable]`,
      `Tuple[String, Callable, 1, 2]`,
    ].map |$str| {
      Example($str,
        Given("String($str)"), Evaluates_to($str))
    }
  ),

  Example('errors when format is not recognized',
    Given(`String(Integer, '%k')`), Evaluates_with(Error(EVAL_ILLEGAL_ARGUMENT, `Illegal format 'k' specified for value of Type type - expected one of the characters 'sp'`))),
)
